<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet version="1.0" xmlns:xsl="http://www.w3.org/1999/XSL/Transform">
  <xsl:output method="xml" indent="yes" omit-xml-declaration="yes"/>

  <xsl:include href="library.xsl"/>


  <xsl:template match="*" mode="part-title">Lists</xsl:template>

  <xsl:template match="itemizedlist|orderedlist|variablelist">
    <xsl:variable name="items" select="count(listitem|varlistentry)"/>
    <xsl:variable name="nesting-level-candidate">
      <xsl:apply-templates mode="nesting-level" select=".."/>
    </xsl:variable>
    <xsl:variable name="nesting-level" select="string-length(normalize-space($nesting-level-candidate))"/>

    <xsl:if test="$items &lt; 2">
      <result>
        <error>List <xsl:call-template name="createid"/> contains <xsl:value-of select="$items"/> item.</error>
        <suggestion>Lists should contain at least 2 items.</suggestion>
      </result>
    </xsl:if>

    <xsl:if test="$nesting-level &gt; 1">
      <result>
        <warning>List <xsl:call-template name="createid"/> is nested inside
          <xsl:value-of select="$nesting-level"/> other lists.
        </warning>
        <suggestion>Avoid nesting lists so deeply.</suggestion>
      </result>
    </xsl:if>

    <xsl:apply-templates/>
  </xsl:template>


  <!-- Find out nesting level by traversing the XML tree upwards. If we find
       another list we output a character. -->
  <xsl:template match="itemizedlist|orderedlist|variablelist|procedure" mode="nesting-level" priority="1">
    <xsl:text>1</xsl:text>
    <xsl:choose>
      <xsl:when test="parent::*">
        <xsl:apply-templates mode="nesting-level" select="parent::*"/>
      </xsl:when>
      <xsl:otherwise/>
    </xsl:choose>
  </xsl:template>

  <xsl:template match="*" mode="nesting-level" priority="1">
    <xsl:choose>
      <xsl:when test="parent::*">
        <xsl:apply-templates mode="nesting-level" select="parent::*"/>
      </xsl:when>
      <xsl:otherwise/>
    </xsl:choose>
  </xsl:template>

</xsl:stylesheet>
